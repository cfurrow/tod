#!/usr/bin/env ruby
require 'colorize'

def find_todfile(path)
  expanded_path = File.expand_path(path) 
  return File.expand_path("#{path}/.todfile") if File.exists?("#{path}/.todfile") || expanded_path == "/" || expanded_path == ENV['HOME']
  find_todfile("../#{path}")
end

def list(kind = 'left')
  if @todfile_exists
    File.open(@todfile_path).each_line do |line|
      unless kind == 'done'
        if line.chars.first == '-'
          puts '*'.yellow + line.reverse.chop.reverse
        end
      end

      if kind == 'all' || kind == 'done'
        if line.chars.first == '+'
          todo = line.chomp.reverse.chop.reverse
          todo = todo.green if kind == 'all'

          puts '*'.green + todo
        end
      end
    end
  else
    puts 'Nothing to do here.'
    puts '`tod add "name"` to create new todo.'
  end
end

def add(todo)
  File.open(@todfile_path, 'a') do |todfile|
    todfile.puts '- ' + todo
  end
end

def done(todo)
  if @todfile_exists
    newlines = []

    File.open(@todfile_path).each_line do |line|
      unless line.include?(todo)
        newlines << line.chomp
      else
        newlines << line.chomp.gsub(/\-/, '+')
      end
    end

    replace_todfile_with(newlines)
  end
end

def clear_done
  if @todfile_exists
    newlines = []

    File.open(@todfile_path).each_line do |line|
      newlines << line unless line.chars.first == '+'
    end

    replace_todfile_with(newlines)
  end
end

def replace_todfile_with(lines)
  File.open(@todfile_path, 'w') do |todfile|
    lines.each { |line| todfile.puts line }
  end
end

@command        = ARGV[0]
@todfile_path   = find_todfile(".")
@todfile_exists = File.exists?(@todfile_path)

case @command
when nil
  list
when 'all'
  list 'all'
when 'finished'
  list 'done'
when 'add'
  @newtodo = ARGV[1]
  add @newtodo
when 'done'
  @query = ARGV[1]
  done @query
when 'clear'
  clear_done
end
